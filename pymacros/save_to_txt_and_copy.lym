<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
import os

def save_current_layout_as_cif_and_copy(filename=r"C:\Users\shai\Documents\my_layout.cif"):
    """
    Saves the currently open layout to a CIF (text) file and
    copies the entire CIF content to the Windows clipboard using 'clip'.
    """
    main_window = pya.MainWindow.instance()
    view = main_window.current_view()
    if view is None:
        raise RuntimeError("No layout view is open.")

    cell_view = view.active_cellview()

    layout = cell_view.layout()
    if layout is None:
        raise RuntimeError("No layout associated with the active cell view.")

    # Prepare the SaveLayoutOptions for CIF
    opts = pya.SaveLayoutOptions()
    opts.format = "CIF"

    # Write the layout to the specified file in CIF format
    layout.write(filename, opts)
    print(f"Layout successfully saved in CIF format to: {filename}")

    # Read the CIF file back as text
    with open(filename, "r", encoding="utf-8", errors="replace") as f:
        cif_data = f.read()

    # Copy the CIF text to the Windows clipboard using 'clip'
    copy_text_to_clipboard_windows(cif_data)
    print("All CIF text has been copied to the clipboard (Windows).")


def copy_text_to_clipboard_windows(text):
    """
    Uses the Windows 'clip' command to put 'text' onto the system clipboard.
    """
    with os.popen('clip', 'w') as pipe:
        pipe.write(text)


# Example usage:
save_current_layout_as_cif_and_copy()
</text>
</klayout-macro>
